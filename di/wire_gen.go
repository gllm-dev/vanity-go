// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"errors"
	"github.com/google/wire"
	"go.gllm.dev/vanity-go/internal/adapters/handlers/rest"
	"go.gllm.dev/vanity-go/internal/services/gosvc"
	"os"
)

// Injectors from wire.go:

func ProvideRestServer() (*rest.Server, error) {
	config, err := rest.LoadConfig()
	if err != nil {
		return nil, err
	}
	domain, err := ProvideDomain()
	if err != nil {
		return nil, err
	}
	repository, err := ProvideRepository()
	if err != nil {
		return nil, err
	}
	service := ProvideService(domain, repository)
	server := rest.New(config, service)
	return server, nil
}

// wire.go:

type Domain string

type Repository string

func ProvideDomain() (Domain, error) {
	domain := os.Getenv("VANITY_DOMAIN")
	if domain == "" {
		return "", errors.New("VANITY_DOMAIN environment variable not set")
	}
	return Domain(domain), nil
}

func ProvideRepository() (Repository, error) {
	repository := os.Getenv("VANITY_REPOSITORY")
	if repository == "" {
		return "", errors.New("VANITY_REPOSITORY environment variable not set")
	}
	return Repository(repository), nil
}

func ProvideService(domain Domain, repository Repository) *gosvc.Service {
	return gosvc.New(string(domain), string(repository))
}

var serviceSet = wire.NewSet(
	ProvideDomain,
	ProvideRepository,
	ProvideService,
)
